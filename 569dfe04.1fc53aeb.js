(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{122:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return f}));var i=t(0),o=t.n(i);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=o.a.createContext({}),p=function(e){var n=o.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return o.a.createElement(l.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},u=o.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(t),u=i,f=d["".concat(s,".").concat(u)]||d[u]||g[u]||a;return t?o.a.createElement(f,r(r({ref:n},l),{},{components:t})):o.a.createElement(f,r({ref:n},l))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,s=new Array(a);s[0]=u;var r={};for(var c in n)hasOwnProperty.call(n,c)&&(r[c]=n[c]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var l=2;l<a;l++)s[l]=t[l];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},75:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return r})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return p}));var i=t(2),o=t(6),a=(t(0),t(122)),s={},r={unversionedId:"sdk/ios-push",id:"sdk/ios-push",isDocsHomePage:!1,title:"ios-push",description:"id: ios-push",source:"@site/docs/sdk/ios-push.md",permalink:"/docs/sdk/ios-push",sidebar:"sdk",previous:{title:"Intilery-iOS Frequently Asked Questions",permalink:"/docs/sdk/ios-faq"},next:{title:"Intilery android Mobile SDK",permalink:"/docs/sdk/android"}},c=[{value:"Setup",id:"setup",children:[]},{value:"Registering devices",id:"registering-devices",children:[{value:"Registering iOS",id:"registering-ios",children:[]},{value:"Monitor For New Token iOS",id:"monitor-for-new-token-ios",children:[]}]},{value:"Receiving Messages",id:"receiving-messages",children:[{value:"Handle messages with method swizzling disabled",id:"handle-messages-with-method-swizzling-disabled",children:[]}]}],l={rightToc:c};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"id: ios-push\ntitle: iOS Push Notifications\nsidebar_label: iOS Push Notifications"),Object(a.b)("h2",{id:"setup"},"Setup"),Object(a.b)("p",null,"To send push notifictions to your app, we use ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://firebase.google.com/"}),"Google Firebase")," as the messaging SDKs. Google Firebase is the number 1 mobile platform."),Object(a.b)("p",null,"In order to send messages from Intilery to your app you should follow the instructions for iOS and android"),Object(a.b)("p",null,Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://firebase.google.com/docs/cloud-messaging/android/client"}),"setting up andoid notifications")),Object(a.b)("p",null,"For android you will need to register your app(s) with google firebase and supply Intilery with one of your FCM Keys for each app."),Object(a.b)("h2",{id:"registering-devices"},"Registering devices"),Object(a.b)("p",null,"For each customer device you will need to send the FCM token and optional deviceId to Intilery as part of an identify event, this registers the device to the customers' profile at Intilery."),Object(a.b)("h3",{id:"registering-ios"},"Registering iOS"),Object(a.b)("p",null,"Once you have completed the steps at ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://firebase.google.com/docs/cloud-messaging/ios/client"}),"setting up android iOS notifications")," you can implement the firebase code and Intielry identify code to register the device to the customer."),Object(a.b)("h4",{id:"swift"},"Swift"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),'if #available(iOS 10.0, *) {\n  // For iOS 10 display notification (sent via APNS)\n  UNUserNotificationCenter.current().delegate = self\n\n  let authOptions: UNAuthorizationOptions = [.alert, .badge, .sound]\n  UNUserNotificationCenter.current().requestAuthorization(\n    options: authOptions,\n    completionHandler: {_, _ in })\n} else {\n  let settings: UIUserNotificationSettings =\n  UIUserNotificationSettings(types: [.alert, .badge, .sound], categories: nil)\n  application.registerUserNotificationSettings(settings)\n}\n\napplication.registerForRemoteNotifications()\n\nAnalytics.shared().identify("a user\'s id", traits: [\n  "pushToken": "the token from firebase",\n  "deviceId" : "a meaningful name, e.g. company iOS App" //optional\n])\n\n')),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note:")," deviceId is optional but recommended, if not set, push notificatinos will be sent to all devices registered to a customer."),Object(a.b)("h4",{id:"objective-c"},"Objective-C"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-objective-c"}),'if ([UNUserNotificationCenter class] != nil) {\n  // iOS 10 or later\n  // For iOS 10 display notification (sent via APNS)\n  [UNUserNotificationCenter currentNotificationCenter].delegate = self;\n  UNAuthorizationOptions authOptions = UNAuthorizationOptionAlert |\n      UNAuthorizationOptionSound | UNAuthorizationOptionBadge;\n  [[UNUserNotificationCenter currentNotificationCenter]\n      requestAuthorizationWithOptions:authOptions\n      completionHandler:^(BOOL granted, NSError * _Nullable error) {\n        // ...\n      }];\n} else {\n  // iOS 10 notifications aren\'t available; fall back to iOS 8-9 notifications.\n  UIUserNotificationType allNotificationTypes =\n  (UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge);\n  UIUserNotificationSettings *settings =\n  [UIUserNotificationSettings settingsForTypes:allNotificationTypes categories:nil];\n  [application registerUserNotificationSettings:settings];\n}\n\n[application registerForRemoteNotifications];\n\n[[SEGAnalytics sharedAnalytics] identify:@"a user\'s id"\n                                traits:@{ @"pushToken": @"the token from firebase",\n                                          @"deviceId": @"a meaningful name, e.g. company iOS App"}];\n')),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note:")," deviceId is optional but recommended, if not set, push notificatinos will be sent to all devices registered to a customer."),Object(a.b)("h3",{id:"monitor-for-new-token-ios"},"Monitor For New Token iOS"),Object(a.b)("p",null,"You should implement code to monitor for a new token on the device, and send the token to Intilery."),Object(a.b)("h4",{id:"swift-1"},"Swift"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),'func messaging(_ messaging: Messaging, didReceiveRegistrationToken fcmToken: String?) {\n  print("Firebase registration token: \\(String(describing: fcmToken))")\n\n  let dataDict:[String: String] = ["token": fcmToken ?? ""]\n  NotificationCenter.default.post(name: Notification.Name("FCMToken"), object: nil, userInfo: dataDict)\n  \n  Analytics.shared().identify("a user\'s id", traits: [\n  "pushToken": "the token from firebase",\n  "deviceId" : "a meaningful name, e.g. company iOS App" //optional\n])\n}\n')),Object(a.b)("h4",{id:"objective-c-1"},"Objective-C"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-objective-c"}),'- (void)messaging:(FIRMessaging *)messaging didReceiveRegistrationToken:(NSString *)fcmToken {\n    NSLog(@"FCM registration token: %@", fcmToken);\n    // Notify about received token.\n    NSDictionary *dataDict = [NSDictionary dictionaryWithObject:fcmToken forKey:@"token"];\n    [[NSNotificationCenter defaultCenter] postNotificationName:\n     @"FCMToken" object:nil userInfo:dataDict];\n    \n  [[SEGAnalytics sharedAnalytics] identify:@"a user\'s id"\n                                traits:@{ @"pushToken": @"the token from firebase",\n                                          @"deviceId": @"a meaningful name, e.g. company iOS App"}];\n}\n')),Object(a.b)("h2",{id:"receiving-messages"},"Receiving Messages"),Object(a.b)("p",null,"In order to notify Intilery of the receing of the message you need to implement the following as detaild ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://firebase.google.com/docs/cloud-messaging/ios/receive#handle_messages"}),"here")),Object(a.b)("p",null,"Implement ",Object(a.b)("inlineCode",{parentName:"p"},"AppDelegate application:didReceiveRemoteNotification:")," "),Object(a.b)("h4",{id:"swift-2"},"Swift"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-swift"}),'func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any]) {\n  // If you are receiving a notification message while your app is in the background,\n  // this callback will not be fired till the user taps on the notification launching the application.\n  // TODO: Handle data of notification\n\n  // With swizzling disabled you must let Messaging know about the message, for Analytics\n  // Messaging.messaging().appDidReceiveMessage(userInfo)\n\n  // Print message ID.\n  if let messageID = userInfo[gcmMessageIDKey] {\n    print("Message ID: \\(messageID)")\n  }\n\n  // Print full message.\n  print(userInfo)\n}\n\nfunc application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any],\n                 fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n  // If you are receiving a notification message while your app is in the background,\n  // this callback will not be fired till the user taps on the notification launching the application.\n  // TODO: Handle data of notification\n\n  // With swizzling disabled you must let Messaging know about the message, for Analytics\n  // Messaging.messaging().appDidReceiveMessage(userInfo)\n\n  // Print message ID.\n  if let messageID = userInfo[gcmMessageIDKey] {\n    print("Message ID: \\(messageID)")\n  }\n\n  // Print full message.\n  print(userInfo)\n  \n  //send to Intilery\n    Analytics.shared().track("Push Notification Received", properties: ["notificationId": messageID])\n  completionHandler(UIBackgroundFetchResult.newData)\n}\n')),Object(a.b)("h4",{id:"objective-c-2"},"Objective-C"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-objective-c"}),'- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {\n  // If you are receiving a notification message while your app is in the background,\n  // this callback will not be fired till the user taps on the notification launching the application.\n  // TODO: Handle data of notification\n\n  // With swizzling disabled you must let Messaging know about the message, for Analytics\n  // [[FIRMessaging messaging] appDidReceiveMessage:userInfo];\n\n  // Print message ID.\n  if (userInfo[kGCMMessageIDKey]) {\n    NSLog(@"Message ID: %@", userInfo[kGCMMessageIDKey]);\n  }\n\n  // Print full message.\n  NSLog(@"%@", userInfo);\n}\n\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo\n    fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {\n  // If you are receiving a notification message while your app is in the background,\n  // this callback will not be fired till the user taps on the notification launching the application.\n  // TODO: Handle data of notification\n\n  // With swizzling disabled you must let Messaging know about the message, for Analytics\n  // [[FIRMessaging messaging] appDidReceiveMessage:userInfo];\n\n  // Print message ID.\n  if (userInfo[kGCMMessageIDKey]) {\n    NSLog(@"Message ID: %@", userInfo[kGCMMessageIDKey]);\n  }\n\n  // Print full message.\n  NSLog(@"%@", userInfo);\n      \n  //Call Intilery\n  [[SEGAnalytics sharedAnalytics] track:@"Push Notification Received"\n                            properties:@{ @"notificationId": userInfo[kGCMMessageIDKey] }];\n\n  completionHandler(UIBackgroundFetchResultNewData);\n}\n')),Object(a.b)("h3",{id:"handle-messages-with-method-swizzling-disabled"},"Handle messages with method swizzling disabled"),Object(a.b)("p",null,"See the instructions ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"https://firebase.google.com/docs/cloud-messaging/ios/receive#handle-swizzle"}),"here")," and add the relevant code to call Intilery"),Object(a.b)("p",null,Object(a.b)("img",Object(i.a)({parentName:"p"},{src:"https://slack-imgs.com/?c=1&o1=wi32.he32.si&url=https%3A%2F%2Fwww.gstatic.com%2Fdevrel-devsite%2Fprod%2Fve312520032ba2ac0c4d23f7b46fc670cbbe051886a2d1f04563a5e4768ad9787%2Ffirebase%2Fimages%2Ftouchicon-180.png",alt:"Firebase"})),Object(a.b)("strong",{parentName:"p"},"Firebase")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},Object(a.b)("a",Object(i.a)({parentName:"strong"},{href:"https://firebase.google.com/docs/cloud-messaging"}),"Firebase Cloud Messaging"))),Object(a.b)("p",null,"Firebase Cloud Messaging (FCM) is a cross-platform messaging solution that lets you reliably send messages at no cost."))}p.isMDXComponent=!0}}]);